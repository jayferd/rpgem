#!/usr/bin/env ruby

begin
  require File.expand_path(File.join(File.dirname(__FILE__),'..','lib','rpgem'))
  require 'optparse'

  options = {}
  OptionParser.new do |opts|
    opts.banner = <<-banner.split($/).map { |l| l.strip }.join($/)
      Usage: rpgem gem_name [OPTIONS]
      if no action is specified (-f, -s, -b), then all three will
      be performed in that order.
    banner

    opts.on('-v VER',
      '--version VER',
      "Specify a specific gem version"
    ) do |v|
      options[:version] = v
    end

    opts.on('-V VER',
      '--version-req VER',
      "Specify a fuzzy version (i.e. '> 4.0')"
    ) do |v|
      options[:version_reqs] ||= []
      options[:version_reqs] << v
    end

    opts.on('-R',
      '--recursive',
      "Recursively rpgem the dependencies"
    ) do
      options[:recursive] = true
    end

    opts.on('-f',
      '--fetch',
      "Fetch the gem"
    ) do
      options[:action] = :fetch!
    end

    opts.on('-s',
      '--make-spec',
      "Make the rpm specfile"
    ) do
      options[:action] = :make_spec!
    end

    opts.on('-b',
      '--build',
      "Build the rpm (this is the default)"
    ) do
      options[:action] = :build!
    end

    opts.on('-p PREFIX',
      '--prefix PREFIX',
      'Specify a prefix to use during the install.  Default: /usr'
    ) do |p|
      options[:prefix] = p.chomp('/')
    end

    opts.on('-d DEPENDS',
      '--depends DEPENDS',
      'Specify a non-gem dependency (e.g. mysql, etc.)'
    ) do |d|
      options[:dependencies] ||= []
      options[:dependencies] << d
    end

    opts.on('--build-dependency BD',
      'Specify a build dependency (e.g. mysql-devel)'
    ) do |bd|
      options[:build_dependencies] ||= []
      options[:build_dependencies] << bd
    end
  end.parse!

  options.rmerge!({
    :version => nil,
    :recursive => false,
    :version_reqs => [],
    :action => :build!,
    :ruby_cmd => "ruby",
    :prefix => '/usr',
    :dependencies => [],
    :build_dependencies => []
  })

  p [options, ARGV]

  FileUtils.mkdir RPGem::TMP unless File.directory? RPGem::TMP

  unless File.directory? RPGem::RPMBUILD_DIR
    FileUtils.mkdir RPGem::RPMBUILD_DIR
    FileUtils.in_dir RPGem::RPMBUILD_DIR do
      FileUtils.mkdir "SOURCES"
      FileUtils.mkdir "SPECS"
    end
  end

  g = RPGem.new(ARGV[0], options)
  g.fetch!
  if options[:recursive]
    g.recurse!(options[:action])
  end
  g.send(options[:action]) unless options[:action] == :fetch!


rescue Exception => e
  puts e.to_s
  puts e.backtrace
  exit! 1
end
